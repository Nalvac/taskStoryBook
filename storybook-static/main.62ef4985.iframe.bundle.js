(self.webpackChunktaskbox=self.webpackChunktaskbox||[]).push([[792],{"./.storybook/preview.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>_storybook_preview});var angular=__webpack_require__("./node_modules/@storybook/addon-docs/angular/index.js");const documentation_namespaceObject=JSON.parse('{"pipes":[],"interfaces":[{"name":"Task","id":"interface-Task-65fb90e4dc34d2734d4f266a9debe7f309cfdead4dabb2d9ae04d2644286a44dacb5bed4eefc28d89fdd07e80e4db044ff0f4172241de360b28eedb128cc15b8","file":"src/app/models/task.model.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"export interface Task {\\n  id?: string;\\n  title?: string;\\n  state?: string;\\n}\\n","properties":[{"name":"id","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":true,"description":"","line":3},{"name":"state","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":true,"description":"","line":5},{"name":"title","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":true,"description":"","line":4}],"indexSignatures":[],"kind":171,"methods":[],"extends":[]},{"name":"TaskStateModel","id":"interface-TaskStateModel-b9270fcc71713c32471bfd26dc73ae5eaf945869eb20b1eb81236eb07622e0e97d495ad204ad75758d15c96668a8b4086adcfa549506eb3dc73e21cf2594119a","file":"src/app/state/task.state.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import {Task} from \\"../models/task.model\\";\\nimport {Action, Selector, State, StateContext} from \\"@ngxs/store\\";\\nimport {Inject, Injectable} from \\"@angular/core\\";\\nimport {patch, updateItem} from \\"@ngxs/store/operators\\";\\n\\nexport const actions = {\\n  ARCHIVE_TASK: \'ARCHIVE_TASK\',\\n  PIN_TASK: \'PIN_TASK\',\\n  ERROR: \'APP_ERROR\',\\n}\\n\\nexport class ArchiveTask{\\n  static  readonly type = actions.ARCHIVE_TASK;\\n\\n  constructor(public payload: string) {\\n  }\\n}\\n\\nexport class PinTask{\\n  static  readonly type = actions.PIN_TASK;\\n\\n  constructor(public payload: string) {\\n  }\\n}\\n\\nexport class AppError{\\n  static  readonly type = actions.ERROR;\\n\\n  constructor(public payload: boolean) {\\n  }\\n}\\n\\n\\nconst defaultTasks = [\\n  { id: \'1\', title: \'Something\', state: \'TASK_INBOX\' },\\n  { id: \'2\', title: \'Something more\', state: \'TASK_INBOX\' },\\n  { id: \'3\', title: \'Something else\', state: \'TASK_INBOX\' },\\n  { id: \'4\', title: \'Something again\', state: \'TASK_INBOX\' },\\n];\\n\\nexport interface TaskStateModel {\\n  tasks: Task[];\\n  status: \'idle\' | \'loading\' | \'error\' | \'success\';\\n  error: boolean;\\n}\\n\\n@State<TaskStateModel>({\\n  name: \'taskBox\',\\n  defaults: {\\n    tasks: defaultTasks,\\n    status: \'idle\',\\n    error: false\\n  },\\n})\\n@Injectable()\\nexport default class TasksState {\\n  @Selector()\\n  static getError(state: TaskStateModel) {\\n    return state.error;\\n  }\\n\\n  @Selector()\\n  static getAllTasks(state: TaskStateModel) {\\n    return state.tasks;\\n  }\\n\\n  @Action(PinTask)\\n  pinTask({getState, setState}: StateContext<TaskStateModel>, {payload}: PinTask) {\\n    const task = getState().tasks.find((task) => task.id === payload);\\n\\n    if (task) {\\n      const updatedTask: Task = {\\n        ...task,\\n        state: \'TASK_PINNED\'\\n      }\\n\\n      setState(patch({tasks: updateItem<Task>( (pinnedTask) => pinnedTask?.id === payload, updatedTask)}));\\n    }\\n  }\\n  @Action(ArchiveTask)\\n  archiveTask(\\n    { getState, setState }: StateContext<TaskStateModel>,\\n    { payload }: ArchiveTask\\n  ) {\\n    const task = getState().tasks.find((task) => task.id === payload);\\n    if (task) {\\n      const updatedTask: Task = {\\n        ...task,\\n        state: \'TASK_ARCHIVED\',\\n      };\\n      setState(\\n        patch({\\n          tasks: updateItem<Task>(\\n            (archivedTask) => archivedTask?.id === payload,\\n            updatedTask\\n          ),\\n        })\\n      );\\n    }\\n  }\\n  @Action(AppError)\\n  setAppError({patchState, getState}: StateContext<TaskStateModel>, {payload}: AppError) {\\n    const state = getState();\\n    patchState({\\n      error: !state.error\\n    });\\n  }\\n}\\n","properties":[{"name":"error","deprecated":false,"deprecationMessage":"","type":"boolean","indexKey":"","optional":false,"description":"","line":44},{"name":"status","deprecated":false,"deprecationMessage":"","type":"\\"idle\\" | \\"loading\\" | \\"error\\" | \\"success\\"","indexKey":"","optional":false,"description":"","line":43},{"name":"tasks","deprecated":false,"deprecationMessage":"","type":"Task[]","indexKey":"","optional":false,"description":"","line":42}],"indexSignatures":[],"kind":171,"methods":[],"extends":[]}],"injectables":[{"name":"TasksState","id":"injectable-TasksState-b9270fcc71713c32471bfd26dc73ae5eaf945869eb20b1eb81236eb07622e0e97d495ad204ad75758d15c96668a8b4086adcfa549506eb3dc73e21cf2594119a","file":"src/app/state/task.state.ts","properties":[],"methods":[{"name":"archiveTask","args":[{"type":"StateContext<TaskStateModel>","deprecated":false,"deprecationMessage":""},{"type":"ArchiveTask","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":81,"deprecated":false,"deprecationMessage":"","decorators":[{"name":"Action","stringifiedArguments":"ArchiveTask"}],"modifierKind":[170],"jsdoctags":[{"type":"StateContext<TaskStateModel>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"type":"ArchiveTask","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"getAllTasks","args":[{"name":"state","type":"TaskStateModel","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"{}","typeParameters":[],"line":63,"deprecated":false,"deprecationMessage":"","decorators":[{"name":"Selector","stringifiedArguments":""}],"modifierKind":[170,126],"jsdoctags":[{"name":"state","type":"TaskStateModel","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"getError","args":[{"name":"state","type":"TaskStateModel","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"boolean","typeParameters":[],"line":58,"deprecated":false,"deprecationMessage":"","decorators":[{"name":"Selector","stringifiedArguments":""}],"modifierKind":[170,126],"jsdoctags":[{"name":"state","type":"TaskStateModel","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"pinTask","args":[{"type":"StateContext<TaskStateModel>","deprecated":false,"deprecationMessage":""},{"type":"PinTask","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":68,"deprecated":false,"deprecationMessage":"","decorators":[{"name":"Action","stringifiedArguments":"PinTask"}],"modifierKind":[170],"jsdoctags":[{"type":"StateContext<TaskStateModel>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"type":"PinTask","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"setAppError","args":[{"type":"StateContext<TaskStateModel>","deprecated":false,"deprecationMessage":""},{"type":"AppError","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":102,"deprecated":false,"deprecationMessage":"","decorators":[{"name":"Action","stringifiedArguments":"AppError"}],"modifierKind":[170],"jsdoctags":[{"type":"StateContext<TaskStateModel>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"type":"AppError","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","description":"","rawdescription":"\\n","sourceCode":"import {Task} from \\"../models/task.model\\";\\nimport {Action, Selector, State, StateContext} from \\"@ngxs/store\\";\\nimport {Inject, Injectable} from \\"@angular/core\\";\\nimport {patch, updateItem} from \\"@ngxs/store/operators\\";\\n\\nexport const actions = {\\n  ARCHIVE_TASK: \'ARCHIVE_TASK\',\\n  PIN_TASK: \'PIN_TASK\',\\n  ERROR: \'APP_ERROR\',\\n}\\n\\nexport class ArchiveTask{\\n  static  readonly type = actions.ARCHIVE_TASK;\\n\\n  constructor(public payload: string) {\\n  }\\n}\\n\\nexport class PinTask{\\n  static  readonly type = actions.PIN_TASK;\\n\\n  constructor(public payload: string) {\\n  }\\n}\\n\\nexport class AppError{\\n  static  readonly type = actions.ERROR;\\n\\n  constructor(public payload: boolean) {\\n  }\\n}\\n\\n\\nconst defaultTasks = [\\n  { id: \'1\', title: \'Something\', state: \'TASK_INBOX\' },\\n  { id: \'2\', title: \'Something more\', state: \'TASK_INBOX\' },\\n  { id: \'3\', title: \'Something else\', state: \'TASK_INBOX\' },\\n  { id: \'4\', title: \'Something again\', state: \'TASK_INBOX\' },\\n];\\n\\nexport interface TaskStateModel {\\n  tasks: Task[];\\n  status: \'idle\' | \'loading\' | \'error\' | \'success\';\\n  error: boolean;\\n}\\n\\n@State<TaskStateModel>({\\n  name: \'taskBox\',\\n  defaults: {\\n    tasks: defaultTasks,\\n    status: \'idle\',\\n    error: false\\n  },\\n})\\n@Injectable()\\nexport default class TasksState {\\n  @Selector()\\n  static getError(state: TaskStateModel) {\\n    return state.error;\\n  }\\n\\n  @Selector()\\n  static getAllTasks(state: TaskStateModel) {\\n    return state.tasks;\\n  }\\n\\n  @Action(PinTask)\\n  pinTask({getState, setState}: StateContext<TaskStateModel>, {payload}: PinTask) {\\n    const task = getState().tasks.find((task) => task.id === payload);\\n\\n    if (task) {\\n      const updatedTask: Task = {\\n        ...task,\\n        state: \'TASK_PINNED\'\\n      }\\n\\n      setState(patch({tasks: updateItem<Task>( (pinnedTask) => pinnedTask?.id === payload, updatedTask)}));\\n    }\\n  }\\n  @Action(ArchiveTask)\\n  archiveTask(\\n    { getState, setState }: StateContext<TaskStateModel>,\\n    { payload }: ArchiveTask\\n  ) {\\n    const task = getState().tasks.find((task) => task.id === payload);\\n    if (task) {\\n      const updatedTask: Task = {\\n        ...task,\\n        state: \'TASK_ARCHIVED\',\\n      };\\n      setState(\\n        patch({\\n          tasks: updateItem<Task>(\\n            (archivedTask) => archivedTask?.id === payload,\\n            updatedTask\\n          ),\\n        })\\n      );\\n    }\\n  }\\n  @Action(AppError)\\n  setAppError({patchState, getState}: StateContext<TaskStateModel>, {payload}: AppError) {\\n    const state = getState();\\n    patchState({\\n      error: !state.error\\n    });\\n  }\\n}\\n","extends":[],"type":"injectable"}],"guards":[],"interceptors":[],"classes":[{"name":"AppError","id":"class-AppError-b9270fcc71713c32471bfd26dc73ae5eaf945869eb20b1eb81236eb07622e0e97d495ad204ad75758d15c96668a8b4086adcfa549506eb3dc73e21cf2594119a","file":"src/app/state/task.state.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"import {Task} from \\"../models/task.model\\";\\nimport {Action, Selector, State, StateContext} from \\"@ngxs/store\\";\\nimport {Inject, Injectable} from \\"@angular/core\\";\\nimport {patch, updateItem} from \\"@ngxs/store/operators\\";\\n\\nexport const actions = {\\n  ARCHIVE_TASK: \'ARCHIVE_TASK\',\\n  PIN_TASK: \'PIN_TASK\',\\n  ERROR: \'APP_ERROR\',\\n}\\n\\nexport class ArchiveTask{\\n  static  readonly type = actions.ARCHIVE_TASK;\\n\\n  constructor(public payload: string) {\\n  }\\n}\\n\\nexport class PinTask{\\n  static  readonly type = actions.PIN_TASK;\\n\\n  constructor(public payload: string) {\\n  }\\n}\\n\\nexport class AppError{\\n  static  readonly type = actions.ERROR;\\n\\n  constructor(public payload: boolean) {\\n  }\\n}\\n\\n\\nconst defaultTasks = [\\n  { id: \'1\', title: \'Something\', state: \'TASK_INBOX\' },\\n  { id: \'2\', title: \'Something more\', state: \'TASK_INBOX\' },\\n  { id: \'3\', title: \'Something else\', state: \'TASK_INBOX\' },\\n  { id: \'4\', title: \'Something again\', state: \'TASK_INBOX\' },\\n];\\n\\nexport interface TaskStateModel {\\n  tasks: Task[];\\n  status: \'idle\' | \'loading\' | \'error\' | \'success\';\\n  error: boolean;\\n}\\n\\n@State<TaskStateModel>({\\n  name: \'taskBox\',\\n  defaults: {\\n    tasks: defaultTasks,\\n    status: \'idle\',\\n    error: false\\n  },\\n})\\n@Injectable()\\nexport default class TasksState {\\n  @Selector()\\n  static getError(state: TaskStateModel) {\\n    return state.error;\\n  }\\n\\n  @Selector()\\n  static getAllTasks(state: TaskStateModel) {\\n    return state.tasks;\\n  }\\n\\n  @Action(PinTask)\\n  pinTask({getState, setState}: StateContext<TaskStateModel>, {payload}: PinTask) {\\n    const task = getState().tasks.find((task) => task.id === payload);\\n\\n    if (task) {\\n      const updatedTask: Task = {\\n        ...task,\\n        state: \'TASK_PINNED\'\\n      }\\n\\n      setState(patch({tasks: updateItem<Task>( (pinnedTask) => pinnedTask?.id === payload, updatedTask)}));\\n    }\\n  }\\n  @Action(ArchiveTask)\\n  archiveTask(\\n    { getState, setState }: StateContext<TaskStateModel>,\\n    { payload }: ArchiveTask\\n  ) {\\n    const task = getState().tasks.find((task) => task.id === payload);\\n    if (task) {\\n      const updatedTask: Task = {\\n        ...task,\\n        state: \'TASK_ARCHIVED\',\\n      };\\n      setState(\\n        patch({\\n          tasks: updateItem<Task>(\\n            (archivedTask) => archivedTask?.id === payload,\\n            updatedTask\\n          ),\\n        })\\n      );\\n    }\\n  }\\n  @Action(AppError)\\n  setAppError({patchState, getState}: StateContext<TaskStateModel>, {payload}: AppError) {\\n    const state = getState();\\n    patchState({\\n      error: !state.error\\n    });\\n  }\\n}\\n","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"payload","type":"boolean","deprecated":false,"deprecationMessage":""}],"line":27,"jsdoctags":[{"name":"payload","type":"boolean","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"inputsClass":[],"outputsClass":[],"properties":[{"name":"payload","deprecated":false,"deprecationMessage":"","type":"boolean","indexKey":"","optional":false,"description":"","line":29,"modifierKind":[125]},{"name":"type","defaultValue":"actions.ERROR","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":27,"modifierKind":[126,148]}],"methods":[],"indexSignatures":[],"extends":[],"hostBindings":[],"hostListeners":[]},{"name":"ArchiveTask","id":"class-ArchiveTask-b9270fcc71713c32471bfd26dc73ae5eaf945869eb20b1eb81236eb07622e0e97d495ad204ad75758d15c96668a8b4086adcfa549506eb3dc73e21cf2594119a","file":"src/app/state/task.state.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"import {Task} from \\"../models/task.model\\";\\nimport {Action, Selector, State, StateContext} from \\"@ngxs/store\\";\\nimport {Inject, Injectable} from \\"@angular/core\\";\\nimport {patch, updateItem} from \\"@ngxs/store/operators\\";\\n\\nexport const actions = {\\n  ARCHIVE_TASK: \'ARCHIVE_TASK\',\\n  PIN_TASK: \'PIN_TASK\',\\n  ERROR: \'APP_ERROR\',\\n}\\n\\nexport class ArchiveTask{\\n  static  readonly type = actions.ARCHIVE_TASK;\\n\\n  constructor(public payload: string) {\\n  }\\n}\\n\\nexport class PinTask{\\n  static  readonly type = actions.PIN_TASK;\\n\\n  constructor(public payload: string) {\\n  }\\n}\\n\\nexport class AppError{\\n  static  readonly type = actions.ERROR;\\n\\n  constructor(public payload: boolean) {\\n  }\\n}\\n\\n\\nconst defaultTasks = [\\n  { id: \'1\', title: \'Something\', state: \'TASK_INBOX\' },\\n  { id: \'2\', title: \'Something more\', state: \'TASK_INBOX\' },\\n  { id: \'3\', title: \'Something else\', state: \'TASK_INBOX\' },\\n  { id: \'4\', title: \'Something again\', state: \'TASK_INBOX\' },\\n];\\n\\nexport interface TaskStateModel {\\n  tasks: Task[];\\n  status: \'idle\' | \'loading\' | \'error\' | \'success\';\\n  error: boolean;\\n}\\n\\n@State<TaskStateModel>({\\n  name: \'taskBox\',\\n  defaults: {\\n    tasks: defaultTasks,\\n    status: \'idle\',\\n    error: false\\n  },\\n})\\n@Injectable()\\nexport default class TasksState {\\n  @Selector()\\n  static getError(state: TaskStateModel) {\\n    return state.error;\\n  }\\n\\n  @Selector()\\n  static getAllTasks(state: TaskStateModel) {\\n    return state.tasks;\\n  }\\n\\n  @Action(PinTask)\\n  pinTask({getState, setState}: StateContext<TaskStateModel>, {payload}: PinTask) {\\n    const task = getState().tasks.find((task) => task.id === payload);\\n\\n    if (task) {\\n      const updatedTask: Task = {\\n        ...task,\\n        state: \'TASK_PINNED\'\\n      }\\n\\n      setState(patch({tasks: updateItem<Task>( (pinnedTask) => pinnedTask?.id === payload, updatedTask)}));\\n    }\\n  }\\n  @Action(ArchiveTask)\\n  archiveTask(\\n    { getState, setState }: StateContext<TaskStateModel>,\\n    { payload }: ArchiveTask\\n  ) {\\n    const task = getState().tasks.find((task) => task.id === payload);\\n    if (task) {\\n      const updatedTask: Task = {\\n        ...task,\\n        state: \'TASK_ARCHIVED\',\\n      };\\n      setState(\\n        patch({\\n          tasks: updateItem<Task>(\\n            (archivedTask) => archivedTask?.id === payload,\\n            updatedTask\\n          ),\\n        })\\n      );\\n    }\\n  }\\n  @Action(AppError)\\n  setAppError({patchState, getState}: StateContext<TaskStateModel>, {payload}: AppError) {\\n    const state = getState();\\n    patchState({\\n      error: !state.error\\n    });\\n  }\\n}\\n","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"payload","type":"string","deprecated":false,"deprecationMessage":""}],"line":13,"jsdoctags":[{"name":"payload","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"inputsClass":[],"outputsClass":[],"properties":[{"name":"payload","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"","line":15,"modifierKind":[125]},{"name":"type","defaultValue":"actions.ARCHIVE_TASK","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":13,"modifierKind":[126,148]}],"methods":[],"indexSignatures":[],"extends":[],"hostBindings":[],"hostListeners":[]},{"name":"PinTask","id":"class-PinTask-b9270fcc71713c32471bfd26dc73ae5eaf945869eb20b1eb81236eb07622e0e97d495ad204ad75758d15c96668a8b4086adcfa549506eb3dc73e21cf2594119a","file":"src/app/state/task.state.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"import {Task} from \\"../models/task.model\\";\\nimport {Action, Selector, State, StateContext} from \\"@ngxs/store\\";\\nimport {Inject, Injectable} from \\"@angular/core\\";\\nimport {patch, updateItem} from \\"@ngxs/store/operators\\";\\n\\nexport const actions = {\\n  ARCHIVE_TASK: \'ARCHIVE_TASK\',\\n  PIN_TASK: \'PIN_TASK\',\\n  ERROR: \'APP_ERROR\',\\n}\\n\\nexport class ArchiveTask{\\n  static  readonly type = actions.ARCHIVE_TASK;\\n\\n  constructor(public payload: string) {\\n  }\\n}\\n\\nexport class PinTask{\\n  static  readonly type = actions.PIN_TASK;\\n\\n  constructor(public payload: string) {\\n  }\\n}\\n\\nexport class AppError{\\n  static  readonly type = actions.ERROR;\\n\\n  constructor(public payload: boolean) {\\n  }\\n}\\n\\n\\nconst defaultTasks = [\\n  { id: \'1\', title: \'Something\', state: \'TASK_INBOX\' },\\n  { id: \'2\', title: \'Something more\', state: \'TASK_INBOX\' },\\n  { id: \'3\', title: \'Something else\', state: \'TASK_INBOX\' },\\n  { id: \'4\', title: \'Something again\', state: \'TASK_INBOX\' },\\n];\\n\\nexport interface TaskStateModel {\\n  tasks: Task[];\\n  status: \'idle\' | \'loading\' | \'error\' | \'success\';\\n  error: boolean;\\n}\\n\\n@State<TaskStateModel>({\\n  name: \'taskBox\',\\n  defaults: {\\n    tasks: defaultTasks,\\n    status: \'idle\',\\n    error: false\\n  },\\n})\\n@Injectable()\\nexport default class TasksState {\\n  @Selector()\\n  static getError(state: TaskStateModel) {\\n    return state.error;\\n  }\\n\\n  @Selector()\\n  static getAllTasks(state: TaskStateModel) {\\n    return state.tasks;\\n  }\\n\\n  @Action(PinTask)\\n  pinTask({getState, setState}: StateContext<TaskStateModel>, {payload}: PinTask) {\\n    const task = getState().tasks.find((task) => task.id === payload);\\n\\n    if (task) {\\n      const updatedTask: Task = {\\n        ...task,\\n        state: \'TASK_PINNED\'\\n      }\\n\\n      setState(patch({tasks: updateItem<Task>( (pinnedTask) => pinnedTask?.id === payload, updatedTask)}));\\n    }\\n  }\\n  @Action(ArchiveTask)\\n  archiveTask(\\n    { getState, setState }: StateContext<TaskStateModel>,\\n    { payload }: ArchiveTask\\n  ) {\\n    const task = getState().tasks.find((task) => task.id === payload);\\n    if (task) {\\n      const updatedTask: Task = {\\n        ...task,\\n        state: \'TASK_ARCHIVED\',\\n      };\\n      setState(\\n        patch({\\n          tasks: updateItem<Task>(\\n            (archivedTask) => archivedTask?.id === payload,\\n            updatedTask\\n          ),\\n        })\\n      );\\n    }\\n  }\\n  @Action(AppError)\\n  setAppError({patchState, getState}: StateContext<TaskStateModel>, {payload}: AppError) {\\n    const state = getState();\\n    patchState({\\n      error: !state.error\\n    });\\n  }\\n}\\n","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"payload","type":"string","deprecated":false,"deprecationMessage":""}],"line":20,"jsdoctags":[{"name":"payload","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"inputsClass":[],"outputsClass":[],"properties":[{"name":"payload","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"","line":22,"modifierKind":[125]},{"name":"type","defaultValue":"actions.PIN_TASK","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":20,"modifierKind":[126,148]}],"methods":[],"indexSignatures":[],"extends":[],"hostBindings":[],"hostListeners":[]}],"directives":[],"components":[{"name":"AppComponent","id":"component-AppComponent-f61e71e34ea3f1678e4db1c03839587ab1446f8d06c6a83e8fafac8de82866d91c552d7485031201b5f0e8b67e083e4dc4634c5411ce41edfe50d59fdd12ab7d","file":"src/app/app.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"app-root","styleUrls":["./app.component.css"],"styles":[],"template":"<app-inbox-screen></app-inbox-screen>","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"title","defaultValue":"\'taskbox\'","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"","line":10}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component } from \'@angular/core\';\\n\\n@Component({\\n    selector: \'app-root\',\\n    template: `<app-inbox-screen></app-inbox-screen>`,\\n    styleUrls: [\'./app.component.css\'],\\n    standalone: false\\n})\\nexport class AppComponent {\\n  title = \'taskbox\';\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":"","styleUrl":"./app.component.css"}],"stylesData":"","extends":[]},{"name":"InboxScreenComponent","id":"component-InboxScreenComponent-79e180c7e23ab2157fe7a31e5d67b7e43744cda555b43249f46b1a961e1eaf72e814827d6815b852c526e371aeb7685f87d7e169bc325f21380409344375a112","file":"src/app/components/inbox-screen.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"app-inbox-screen","styleUrls":[],"styles":[],"template":"<app-pure-inbox-screen [error]=\\"error$ | async\\"></app-pure-inbox-screen>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"error$","deprecated":false,"deprecationMessage":"","type":"Observable<boolean>","indexKey":"","optional":false,"description":"","line":19}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"PureInboxScreenComponent","type":"component"},{"name":"AsyncPipe","type":"pipe"}],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component } from \'@angular/core\';\\nimport { Store } from \'@ngxs/store\';\\nimport { Observable } from \'rxjs\';\\nimport PureInboxScreenComponent from \\"./pure-inbox-screen.component\\";\\nimport {AsyncPipe} from \\"@angular/common\\";\\n\\n@Component({\\n  selector: \'app-inbox-screen\',\\n  template: `\\n    <app-pure-inbox-screen [error]=\\"error$ | async\\"></app-pure-inbox-screen>\\n  `,\\n  imports: [\\n    PureInboxScreenComponent,\\n    AsyncPipe\\n  ]\\n})\\nexport default class InboxScreenComponent {\\n  error$: Observable<boolean>;\\n  constructor(private store: Store) {\\n    this.error$ = store.select((state) => state.taskbox?.error);\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":"","stylesData":"","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"store","type":"Store","deprecated":false,"deprecationMessage":""}],"line":19,"jsdoctags":[{"name":"store","type":"Store","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"extends":[]},{"name":"PureInboxScreenComponent","id":"component-PureInboxScreenComponent-46fb6737e3fa1527d2e82367cfd3369b5f6735fce0fe1ef1ce2266a2dbd748313a5f68d7c01c1948939a94f694c7cf7d65bc41e2aa13a9ce79f44b1c6141a189","file":"src/app/components/pure-inbox-screen.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"app-pure-inbox-screen","styleUrls":[],"styles":[],"template":"<div *ngIf=\\"error\\" class=\\"page lists-show\\">\\n  <div class=\\"wrapper-message\\">\\n    <span class=\\"icon-face-sad\\"></span>\\n    <p class=\\"title-message\\">Oh no!</p>\\n    <p class=\\"subtitle-message\\">Something went wrong</p>\\n  </div>\\n</div>\\n\\n<div *ngIf=\\"!error\\" class=\\"page lists-show\\">\\n  <nav>\\n    <h1 class=\\"title-page\\">Taskbox</h1>\\n  </nav>\\n  <app-task-list></app-task-list>\\n</div>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"error","deprecated":false,"deprecationMessage":"","line":27,"type":"any","decorators":[]}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"TaskListComponent","type":"component"}],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component, Input } from \'@angular/core\';\\nimport {CommonModule} from \\"@angular/common\\";\\nimport {TaskListComponent} from \\"./task-list.component\\";\\n\\n@Component({\\n  selector: \'app-pure-inbox-screen\',\\n  template: `\\n    <div *ngIf=\\"error\\" class=\\"page lists-show\\">\\n      <div class=\\"wrapper-message\\">\\n        <span class=\\"icon-face-sad\\"></span>\\n        <p class=\\"title-message\\">Oh no!</p>\\n        <p class=\\"subtitle-message\\">Something went wrong</p>\\n      </div>\\n    </div>\\n\\n    <div *ngIf=\\"!error\\" class=\\"page lists-show\\">\\n      <nav>\\n        <h1 class=\\"title-page\\">Taskbox</h1>\\n      </nav>\\n      <app-task-list></app-task-list>\\n    </div>\\n  `,\\n  imports: [CommonModule, TaskListComponent]\\n})\\nexport default class PureInboxScreenComponent {\\n  @Input() error: any;\\n}\\n","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":[]},{"name":"PureTaskListComponent","id":"component-PureTaskListComponent-99668565f30ee973fa3de760993caed3d8225b0ec8663c14401de216ccc9703712d554315439bd20e080604bdf7d26265871e0a6a819d01e398420437c26cf01","file":"src/app/components/pur-task-list.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"app-pure-task-list","styleUrls":[],"styles":[],"template":"<div class=\\"list-items\\">\\n  <app-task\\n    *ngFor=\\"let task of tasksInOrder\\"\\n    [task]=\\"task\\"\\n    (onArchiveTask)=\\"onArchiveTask.emit($event)\\"\\n    (onPinTask)=\\"onPinTask.emit($event)\\"\\n  >\\n  </app-task>\\n  <div\\n    *ngIf=\\"tasksInOrder.length === 0 && !loading\\"\\n    class=\\"wrapper-message\\"\\n  >\\n    <span class=\\"icon-check\\"></span>\\n    <p class=\\"title-message\\">You have no tasks</p>\\n    <p class=\\"subtitle-message\\">Sit back and relax</p>\\n  </div>\\n  <div *ngIf=\\"loading\\">\\n    <div *ngFor=\\"let i of [1, 2, 3, 4, 5, 6]\\" class=\\"loading-item\\">\\n      <span class=\\"glow-checkbox\\"></span>\\n      <span class=\\"glow-text\\">\\n        <span>Loading</span> <span>cool</span> <span>state</span>\\n      </span>\\n    </div>\\n  </div>\\n</div>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"loading","defaultValue":"false","deprecated":false,"deprecationMessage":"","line":45,"type":"boolean","decorators":[]},{"name":"tasks","deprecated":false,"deprecationMessage":"","line":54,"type":"Task[]","decorators":[]}],"outputsClass":[{"name":"onArchiveTask","defaultValue":"new EventEmitter()","deprecated":false,"deprecationMessage":"","line":51,"type":"EventEmitter<any>"},{"name":"onPinTask","defaultValue":"new EventEmitter()","deprecated":false,"deprecationMessage":"","line":48,"type":"EventEmitter<any>"}],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"TaskComponent","type":"component"}],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component, Input, Output, EventEmitter } from \'@angular/core\';\\nimport { Task } from \'../models/task.model\';\\nimport {CommonModule} from \\"@angular/common\\";\\nimport {TaskComponent} from \\"./task.commponent\\";\\n\\n@Component({\\n  selector: \'app-pure-task-list\',\\n  template: `\\n    <div class=\\"list-items\\">\\n      <app-task\\n        *ngFor=\\"let task of tasksInOrder\\"\\n        [task]=\\"task\\"\\n        (onArchiveTask)=\\"onArchiveTask.emit($event)\\"\\n        (onPinTask)=\\"onPinTask.emit($event)\\"\\n      >\\n      </app-task>\\n      <div\\n        *ngIf=\\"tasksInOrder.length === 0 && !loading\\"\\n        class=\\"wrapper-message\\"\\n      >\\n        <span class=\\"icon-check\\"></span>\\n        <p class=\\"title-message\\">You have no tasks</p>\\n        <p class=\\"subtitle-message\\">Sit back and relax</p>\\n      </div>\\n      <div *ngIf=\\"loading\\">\\n        <div *ngFor=\\"let i of [1, 2, 3, 4, 5, 6]\\" class=\\"loading-item\\">\\n          <span class=\\"glow-checkbox\\"></span>\\n          <span class=\\"glow-text\\">\\n            <span>Loading</span> <span>cool</span> <span>state</span>\\n          </span>\\n        </div>\\n      </div>\\n    </div>\\n  `,\\n  imports: [CommonModule, TaskComponent]\\n})\\nexport default class PureTaskListComponent {\\n  /**\\n   * @ignore\\n   * Component property to define ordering of tasks\\n   */\\n  tasksInOrder: Task[] = [];\\n\\n  @Input() loading = false;\\n\\n  // tslint:disable-next-line: no-output-on-prefix\\n  @Output() onPinTask: EventEmitter<any> = new EventEmitter();\\n\\n  // tslint:disable-next-line: no-output-on-prefix\\n  @Output() onArchiveTask: EventEmitter<any> = new EventEmitter();\\n\\n  @Input()\\n  set tasks(arr: Task[]) {\\n    const initialTasks = [\\n      ...arr?.filter((t) => t.state === \'TASK_PINNED\'),\\n      ...arr?.filter((t) => t.state !== \'TASK_PINNED\'),\\n    ];\\n    const filteredTasks = initialTasks.filter(\\n      (t) => t.state === \'TASK_INBOX\' || t.state === \'TASK_PINNED\'\\n    );\\n    this.tasksInOrder = filteredTasks.filter(\\n      (t) => t.state === \'TASK_INBOX\' || t.state === \'TASK_PINNED\'\\n    );\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":[],"accessors":{"tasks":{"name":"tasks","setSignature":{"name":"tasks","type":"void","deprecated":false,"deprecationMessage":"","args":[{"name":"arr","type":"Task[]","deprecated":false,"deprecationMessage":""}],"returnType":"void","line":54,"jsdoctags":[{"name":"arr","type":"Task[]","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}}}},{"name":"TaskComponent","id":"component-TaskComponent-8423467d96296582c01d0b139620ba48026468328f705c9d2e70a14576371cee580a84605722155bd5220e7b7d1db050f22c971fe48733c9c2a0e980c50014b7","file":"src/app/components/task.commponent.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"app-task","styleUrls":[],"styles":[],"template":"<div class=\\"list-item {{ task?.state }}\\">\\n  <label\\n    [attr.aria-label]=\\"\'archiveTask-\' + task?.id\\"\\n    for=\\"checked-{{ task?.id }}\\"\\n    class=\\"checkbox\\"\\n  >\\n    <input\\n      type=\\"checkbox\\"\\n      disabled=\\"true\\"\\n      [defaultChecked]=\\"task?.state === \'TASK_ARCHIVED\'\\"\\n      name=\\"checked-{{ task?.id }}\\"\\n      id=\\"checked-{{ task?.id }}\\"\\n    />\\n    <span class=\\"checkbox-custom\\" (click)=\\"onArchive(task?.id)\\"></span>\\n  </label>\\n  <label\\n    [attr.aria-label]=\\"task?.title + \'\'\\"\\n    for=\\"title-{{ task?.id }}\\"\\n    class=\\"title\\"\\n  >\\n    <input\\n      type=\\"text\\"\\n      [value]=\\"task?.title\\"\\n      readonly=\\"true\\"\\n      id=\\"title-{{ task?.id }}\\"\\n      name=\\"title-{{ task?.id }}\\"\\n      placeholder=\\"Input title\\"\\n    />\\n  </label>\\n  <button\\n    *ngIf=\\"task?.state !== \'TASK_ARCHIVED\'\\"\\n    class=\\"pin-button\\"\\n    [attr.aria-label]=\\"\'pinTask-\' + task?.id\\"\\n    (click)=\\"onPin(task?.id)\\"\\n  >\\n    <span class=\\"icon-star\\"></span>\\n  </button>\\n</div>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"task","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nThe shape of the task\\n","description":"<p>The shape of the task</p>\\n","line":57,"type":"any","decorators":[]}],"outputsClass":[{"name":"onArchiveTask","defaultValue":"new EventEmitter<any>()","deprecated":false,"deprecationMessage":"","line":63,"type":"EventEmitter"},{"name":"onPinTask","defaultValue":"new EventEmitter<any>()","deprecated":false,"deprecationMessage":"","line":60,"type":"EventEmitter"}],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"}],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import {Component, EventEmitter, Input, Output} from \\"@angular/core\\";\\nimport {CommonModule} from \\"@angular/common\\";\\n\\n@Component({\\n  selector: \'app-task\',\\n  template: `\\n    <div class=\\"list-item {{ task?.state }}\\">\\n      <label\\n        [attr.aria-label]=\\"\'archiveTask-\' + task?.id\\"\\n        for=\\"checked-{{ task?.id }}\\"\\n        class=\\"checkbox\\"\\n      >\\n        <input\\n          type=\\"checkbox\\"\\n          disabled=\\"true\\"\\n          [defaultChecked]=\\"task?.state === \'TASK_ARCHIVED\'\\"\\n          name=\\"checked-{{ task?.id }}\\"\\n          id=\\"checked-{{ task?.id }}\\"\\n        />\\n        <span class=\\"checkbox-custom\\" (click)=\\"onArchive(task?.id)\\"></span>\\n      </label>\\n      <label\\n        [attr.aria-label]=\\"task?.title + \'\'\\"\\n        for=\\"title-{{ task?.id }}\\"\\n        class=\\"title\\"\\n      >\\n        <input\\n          type=\\"text\\"\\n          [value]=\\"task?.title\\"\\n          readonly=\\"true\\"\\n          id=\\"title-{{ task?.id }}\\"\\n          name=\\"title-{{ task?.id }}\\"\\n          placeholder=\\"Input title\\"\\n        />\\n      </label>\\n      <button\\n        *ngIf=\\"task?.state !== \'TASK_ARCHIVED\'\\"\\n        class=\\"pin-button\\"\\n        [attr.aria-label]=\\"\'pinTask-\' + task?.id\\"\\n        (click)=\\"onPin(task?.id)\\"\\n      >\\n        <span class=\\"icon-star\\"></span>\\n      </button>\\n    </div>\\n  `,\\n\\n\\n  imports: [\\n    CommonModule\\n  ]\\n})\\nexport class TaskComponent {\\n\\n  /**\\n   * The shape of the task\\n   */\\n  @Input() task: any;\\n\\n  @Output()\\n  onPinTask = new EventEmitter<any>();\\n\\n  @Output()\\n  onArchiveTask = new EventEmitter<any>();\\n\\n  /**\\n   * @ignore\\n   * Component method to trigger the pin event\\n   * @param id string\\n   */\\n  onPin(id: string) {\\n    this.onPinTask.emit(id);\\n  }\\n\\n  /**\\n   * @ignore\\n   * Component method to trigger the archive event\\n   * @param id string\\n   */\\n  onArchive(id: string) {\\n    this.onArchiveTask.emit(id);\\n  }\\n\\n}\\n","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":[]},{"name":"TaskListComponent","id":"component-TaskListComponent-1d559b67876430a0bda1a0cb6ecbc5da8f92548f5fd0f5ad5551580a5320eaeb1dcad51b30dd916810b03586690935b9959c0c0c89e566cd5c6bd91dd65c90cc","file":"src/app/components/task-list.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"app-task-list","styleUrls":[],"styles":[],"template":"<app-pure-task-list\\n  [tasks]=\\"tasks\\"\\n  (onArchiveTask)=\\"archiveTask($event)\\"\\n  (onPinTask)=\\"pinTask($event)\\"\\n></app-pure-task-list>\\n","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"tasks","defaultValue":"[]","deprecated":false,"deprecationMessage":"","type":"Task[]","indexKey":"","optional":false,"description":"","line":27}],"methodsClass":[{"name":"archiveTask","args":[{"name":"id","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":40,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nComponent method to trigger the archiveTask event\\n","description":"<p>Component method to trigger the archiveTask event</p>\\n","jsdoctags":[{"name":"id","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"ngOnInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":31,"deprecated":false,"deprecationMessage":""},{"name":"pinTask","args":[{"name":"id","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":47,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nComponent method to trigger the pinTask event\\n","description":"<p>Component method to trigger the pinTask event</p>\\n","jsdoctags":[{"name":"id","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"PureTaskListComponent","type":"component"}],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import {Component, EventEmitter, Input, OnInit, Output} from \\"@angular/core\\";\\nimport {TaskComponent} from \\"./task.commponent\\";\\nimport {CommonModule, NgForOf, NgIf} from \\"@angular/common\\";\\nimport PureTaskListComponent from \\"./pur-task-list.component\\";\\nimport {ArchiveTask, PinTask, TaskStateModel} from \\"../state/task.state\\";\\nimport {Store} from \\"@ngxs/store\\";\\nimport {Observable} from \\"rxjs\\";\\nimport TasksState from \'../state/task.state\';\\nimport {Task} from \\"../models/task.model\\";\\n\\n@Component({\\n  selector: \'app-task-list\',\\n  template: `\\n    <app-pure-task-list\\n      [tasks]=\\"tasks\\"\\n      (onArchiveTask)=\\"archiveTask($event)\\"\\n      (onPinTask)=\\"pinTask($event)\\"\\n    ></app-pure-task-list>\\n  `,\\n  imports: [\\n    CommonModule,\\n    PureTaskListComponent\\n  ]\\n})\\nexport class TaskListComponent implements  OnInit {\\n\\n  tasks: Task[] = [];\\n\\n  constructor(private store: Store) {}\\n\\n  ngOnInit() {\\n    this.store.select(TasksState.getAllTasks).subscribe(tasks => {\\n      this.tasks = tasks;\\n    });\\n  }\\n\\n  /**\\n   * Component method to trigger the archiveTask event\\n   */\\n  archiveTask(id: string) {\\n    this.store.dispatch(new ArchiveTask(id));\\n  }\\n\\n  /**\\n   * Component method to trigger the pinTask event\\n   */\\n  pinTask(id: string) {\\n    this.store.dispatch(new PinTask(id));\\n  }\\n\\n/*\\n  /!**\\n   *@ignore\\n   * Component property to define ordering of tasks\\n   *!/\\n\\n  tasksInOrder: Task[] = [];\\n\\n  private _tasks: Task[] = [];\\n\\n  /!**\\n   * List of tasks\\n   *!/\\n  @Input()\\n  get tasks(): Task[] {\\n    return  this._tasks;\\n  };\\n\\n  set tasks(tasks: Task[]) {\\n    const initialTasks = [\\n      ...tasks.filter(t => t.state === \'TASK_PINNED\'),\\n      ...tasks.filter(t => t.state !== \'TASK_PINNED\'),\\n    ];\\n    const filteredTasks = initialTasks.filter(\\n      t => t.state === \'TASK_INBOX\' || t.state === \'TASK_PINNED\'\\n    );\\n    this.tasksInOrder = filteredTasks.filter(\\n      t => t.state === \'TASK_INBOX\' || t.state === \'TASK_PINNED\'\\n    );\\n  }\\n  /!**\\n   * Check if it\'s loading state\\n   *!/\\n  @Input() loading: boolean = false;\\n\\n  /!**\\n   * Event to change the task to pinned\\n   *!/\\n  @Output()\\n  onPinTask = new EventEmitter<Event>();\\n\\n  /!**\\n   * Event to change the task to archived\\n   *!/\\n  @Output()\\n  onArchiveTask = new EventEmitter<Event>();\\n*/\\n\\n\\n}\\n","assetsDirs":[],"styleUrlsData":"","stylesData":"","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"store","type":"Store","deprecated":false,"deprecationMessage":""}],"line":27,"jsdoctags":[{"name":"store","type":"Store","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"extends":[],"implements":["OnInit"]}],"modules":[{"name":"AppModule","id":"module-AppModule-6e5f6a880a8884641f4e556a07b1eb56be4fadc7e42c04eecb6e707636403d6a18a12ac26dff391e55fe24a865afdfd0f2923098a622eb1f4d7a77b90a2c708a","description":"","deprecationMessage":"","deprecated":false,"file":"src/app/app.module.ts","methods":[],"sourceCode":"import { NgModule } from \'@angular/core\';\\nimport { BrowserModule } from \'@angular/platform-browser\';\\nimport { AppComponent } from \'./app.component\';\\nimport {NgxsReduxDevtoolsPluginModule} from \\"@ngxs/devtools-plugin\\";\\nimport {environment} from \\"../environments/environment\\";\\nimport {NgxsModule} from \\"@ngxs/store\\";\\nimport {NgxsLoggerPluginModule} from \\"@ngxs/logger-plugin\\";\\nimport InboxScreenComponent from \\"./components/inbox-screen.component\\";\\nimport TasksState from \\"./state/task.state\\";\\n\\n@NgModule({\\n  declarations: [\\n    AppComponent\\n  ],\\n  imports: [\\n    BrowserModule,\\n    NgxsModule.forRoot([TasksState], { // Enregistrez TasksState ici\\n      developmentMode: !environment.production,\\n    }),\\n    NgxsModule.forFeature([]),\\n    NgxsReduxDevtoolsPluginModule.forRoot(),\\n    NgxsLoggerPluginModule.forRoot({\\n      disabled: environment.production,\\n    }),\\n    InboxScreenComponent,\\n  ],\\n  providers: [],\\n  bootstrap: [AppComponent]\\n})\\nexport class AppModule { }\\n","children":[{"type":"providers","elements":[]},{"type":"declarations","elements":[{"name":"AppComponent"}]},{"type":"imports","elements":[{"name":"InboxScreenComponent"}]},{"type":"exports","elements":[]},{"type":"bootstrap","elements":[{"name":"AppComponent"}]},{"type":"classes","elements":[]}]}],"miscellaneous":{"variables":[{"name":"actions","ctype":"miscellaneous","subtype":"variable","file":"src/app/state/task.state.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\n  ARCHIVE_TASK: \'ARCHIVE_TASK\',\\n  PIN_TASK: \'PIN_TASK\',\\n  ERROR: \'APP_ERROR\',\\n}"},{"name":"defaultTasks","ctype":"miscellaneous","subtype":"variable","file":"src/app/state/task.state.ts","deprecated":false,"deprecationMessage":"","type":"[]","defaultValue":"[\\n  { id: \'1\', title: \'Something\', state: \'TASK_INBOX\' },\\n  { id: \'2\', title: \'Something more\', state: \'TASK_INBOX\' },\\n  { id: \'3\', title: \'Something else\', state: \'TASK_INBOX\' },\\n  { id: \'4\', title: \'Something again\', state: \'TASK_INBOX\' },\\n]"},{"name":"environment","ctype":"miscellaneous","subtype":"variable","file":"src/environments/environment.prod.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\n  production: true,\\n}"},{"name":"environment","ctype":"miscellaneous","subtype":"variable","file":"src/environments/environment.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\n  production: false,\\n}"}],"functions":[],"typealiases":[],"enumerations":[],"groupedVariables":{"src/app/state/task.state.ts":[{"name":"actions","ctype":"miscellaneous","subtype":"variable","file":"src/app/state/task.state.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\n  ARCHIVE_TASK: \'ARCHIVE_TASK\',\\n  PIN_TASK: \'PIN_TASK\',\\n  ERROR: \'APP_ERROR\',\\n}"},{"name":"defaultTasks","ctype":"miscellaneous","subtype":"variable","file":"src/app/state/task.state.ts","deprecated":false,"deprecationMessage":"","type":"[]","defaultValue":"[\\n  { id: \'1\', title: \'Something\', state: \'TASK_INBOX\' },\\n  { id: \'2\', title: \'Something more\', state: \'TASK_INBOX\' },\\n  { id: \'3\', title: \'Something else\', state: \'TASK_INBOX\' },\\n  { id: \'4\', title: \'Something again\', state: \'TASK_INBOX\' },\\n]"}],"src/environments/environment.prod.ts":[{"name":"environment","ctype":"miscellaneous","subtype":"variable","file":"src/environments/environment.prod.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\n  production: true,\\n}"}],"src/environments/environment.ts":[{"name":"environment","ctype":"miscellaneous","subtype":"variable","file":"src/environments/environment.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\n  production: false,\\n}"}]},"groupedFunctions":{},"groupedEnumerations":{},"groupedTypeAliases":{}},"routes":[],"coverage":{"count":3,"status":"low","files":[{"filePath":"src/app/app.component.ts","type":"component","linktype":"component","name":"AppComponent","coveragePercent":0,"coverageCount":"0/2","status":"low"},{"filePath":"src/app/components/inbox-screen.component.ts","type":"component","linktype":"component","name":"InboxScreenComponent","coveragePercent":0,"coverageCount":"0/3","status":"low"},{"filePath":"src/app/components/pur-task-list.component.ts","type":"component","linktype":"component","name":"PureTaskListComponent","coveragePercent":0,"coverageCount":"0/5","status":"low"},{"filePath":"src/app/components/pure-inbox-screen.component.ts","type":"component","linktype":"component","name":"PureInboxScreenComponent","coveragePercent":0,"coverageCount":"0/2","status":"low"},{"filePath":"src/app/components/task-list.component.ts","type":"component","linktype":"component","name":"TaskListComponent","coveragePercent":33,"coverageCount":"2/6","status":"medium"},{"filePath":"src/app/components/task.commponent.ts","type":"component","linktype":"component","name":"TaskComponent","coveragePercent":25,"coverageCount":"1/4","status":"low"},{"filePath":"src/app/models/task.model.ts","type":"interface","linktype":"interface","name":"Task","coveragePercent":0,"coverageCount":"0/4","status":"low"},{"filePath":"src/app/state/task.state.ts","type":"class","linktype":"classe","name":"AppError","coveragePercent":0,"coverageCount":"0/4","status":"low"},{"filePath":"src/app/state/task.state.ts","type":"class","linktype":"classe","name":"ArchiveTask","coveragePercent":0,"coverageCount":"0/4","status":"low"},{"filePath":"src/app/state/task.state.ts","type":"class","linktype":"classe","name":"PinTask","coveragePercent":0,"coverageCount":"0/4","status":"low"},{"filePath":"src/app/state/task.state.ts","type":"injectable","linktype":"injectable","name":"TasksState","coveragePercent":0,"coverageCount":"0/6","status":"low"},{"filePath":"src/app/state/task.state.ts","type":"interface","linktype":"interface","name":"TaskStateModel","coveragePercent":0,"coverageCount":"0/4","status":"low"},{"filePath":"src/app/state/task.state.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"actions","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/app/state/task.state.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"defaultTasks","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/environments/environment.prod.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"environment","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/environments/environment.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"environment","coveragePercent":0,"coverageCount":"0/1","status":"low"}]}}');(0,angular.$)(documentation_namespaceObject);const _storybook_preview={parameters:{controls:{matchers:{color:/(background|color)$/i,date:/Date$/}}}}},"./storybook-config-entry.js":(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{"use strict";var external_STORYBOOK_MODULE_CHANNELS_=__webpack_require__("storybook/internal/channels"),external_STORYBOOK_MODULE_PREVIEW_API_=__webpack_require__("storybook/internal/preview-api"),external_STORYBOOK_MODULE_GLOBAL_=__webpack_require__("@storybook/global"),asyncToGenerator=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js");const importers=[function(){var _ref=(0,asyncToGenerator.A)((function*(path){if(!/^\.[\\/](?:src(?:\/(?!\.)(?:(?:(?!(?:^|\/)\.).)*?)\/|\/|$)(?!\.)(?=.)[^/]*?\.mdx)$/.exec(path))return;const pathRemainder=path.substring(6);return __webpack_require__("./src lazy recursive ^\\.\\/.*$ include: (?%21.*node_modules)(?:\\/src(?:\\/(?%21\\.)(?:(?:(?%21(?:^%7C\\/)\\.).)*?)\\/%7C\\/%7C$)(?%21\\.)(?=.)[^/]*?\\.mdx)$")("./"+pathRemainder)}));return function(_x){return _ref.apply(this,arguments)}}(),function(){var _ref2=(0,asyncToGenerator.A)((function*(path){if(!/^\.[\\/](?:src(?:\/(?!\.)(?:(?:(?!(?:^|\/)\.).)*?)\/|\/|$)(?!\.)(?=.)[^/]*?\.stories\.(js|jsx|ts|tsx))$/.exec(path))return;const pathRemainder=path.substring(6);return __webpack_require__("./src lazy recursive ^\\.\\/.*$ include: (?%21.*node_modules)(?:\\/src(?:\\/(?%21\\.)(?:(?:(?%21(?:^%7C\\/)\\.).)*?)\\/%7C\\/%7C$)(?%21\\.)(?=.)[^/]*?\\.stories\\.(js%7Cjsx%7Cts%7Ctsx))$")("./"+pathRemainder)}));return function(_x2){return _ref2.apply(this,arguments)}}()];function _importFn(){return(_importFn=(0,asyncToGenerator.A)((function*(path){for(let i=0;i<importers.length;i++){const moduleExports=yield(x=()=>importers[i](path),x());if(moduleExports)return moduleExports}var x}))).apply(this,arguments)}const channel=(0,external_STORYBOOK_MODULE_CHANNELS_.createBrowserChannel)({page:"preview"});external_STORYBOOK_MODULE_PREVIEW_API_.addons.setChannel(channel),"DEVELOPMENT"===external_STORYBOOK_MODULE_GLOBAL_.global.CONFIG_TYPE&&(window.__STORYBOOK_SERVER_CHANNEL__=channel);const preview=new external_STORYBOOK_MODULE_PREVIEW_API_.PreviewWeb((function importFn(_x3){return _importFn.apply(this,arguments)}),(()=>(0,external_STORYBOOK_MODULE_PREVIEW_API_.composeConfigs)([__webpack_require__("./node_modules/@storybook/angular/dist/client/preview-prod.js"),__webpack_require__("./node_modules/@storybook/angular/dist/client/docs/config.js"),__webpack_require__("./node_modules/@storybook/angular/dist/client/config.js"),__webpack_require__("./node_modules/@storybook/addon-links/dist/preview.mjs"),__webpack_require__("./node_modules/@storybook/addon-essentials/dist/docs/preview.mjs"),__webpack_require__("./node_modules/@storybook/addon-essentials/dist/actions/preview.mjs"),__webpack_require__("./node_modules/@storybook/addon-essentials/dist/backgrounds/preview.mjs"),__webpack_require__("./node_modules/@storybook/addon-essentials/dist/viewport/preview.mjs"),__webpack_require__("./node_modules/@storybook/addon-essentials/dist/measure/preview.mjs"),__webpack_require__("./node_modules/@storybook/addon-essentials/dist/outline/preview.mjs"),__webpack_require__("./node_modules/@storybook/addon-essentials/dist/highlight/preview.mjs"),__webpack_require__("./node_modules/@storybook/addon-interactions/dist/preview.mjs"),__webpack_require__("./node_modules/@storybook/addon-a11y/dist/preview.mjs"),__webpack_require__("./.storybook/preview.ts")])));window.__STORYBOOK_PREVIEW__=preview,window.__STORYBOOK_STORY_STORE__=preview.storyStore,window.__STORYBOOK_ADDONS_CHANNEL__=channel},"./node_modules/@storybook/addon-a11y/node_modules/@storybook/instrumenter/dist sync recursive":module=>{function webpackEmptyContext(req){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}webpackEmptyContext.keys=()=>[],webpackEmptyContext.resolve=webpackEmptyContext,webpackEmptyContext.id="./node_modules/@storybook/addon-a11y/node_modules/@storybook/instrumenter/dist sync recursive",module.exports=webpackEmptyContext},"./node_modules/@storybook/addon-a11y/node_modules/@storybook/test/dist sync recursive":module=>{function webpackEmptyContext(req){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}webpackEmptyContext.keys=()=>[],webpackEmptyContext.resolve=webpackEmptyContext,webpackEmptyContext.id="./node_modules/@storybook/addon-a11y/node_modules/@storybook/test/dist sync recursive",module.exports=webpackEmptyContext},"./node_modules/@storybook/instrumenter/dist sync recursive":module=>{function webpackEmptyContext(req){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}webpackEmptyContext.keys=()=>[],webpackEmptyContext.resolve=webpackEmptyContext,webpackEmptyContext.id="./node_modules/@storybook/instrumenter/dist sync recursive",module.exports=webpackEmptyContext},"./node_modules/@storybook/test/dist sync recursive":module=>{function webpackEmptyContext(req){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}webpackEmptyContext.keys=()=>[],webpackEmptyContext.resolve=webpackEmptyContext,webpackEmptyContext.id="./node_modules/@storybook/test/dist sync recursive",module.exports=webpackEmptyContext},"./node_modules/memoizerific sync recursive":module=>{function webpackEmptyContext(req){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}webpackEmptyContext.keys=()=>[],webpackEmptyContext.resolve=webpackEmptyContext,webpackEmptyContext.id="./node_modules/memoizerific sync recursive",module.exports=webpackEmptyContext},"./src/styles.css?ngGlobalStyle":()=>{},"./src lazy recursive ^\\.\\/.*$ include: (?%21.*node_modules)(?:\\/src(?:\\/(?%21\\.)(?:(?:(?%21(?:^%7C\\/)\\.).)*?)\\/%7C\\/%7C$)(?%21\\.)(?=.)[^/]*?\\.mdx)$":module=>{function webpackEmptyAsyncContext(req){return Promise.resolve().then((()=>{var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}))}webpackEmptyAsyncContext.keys=()=>[],webpackEmptyAsyncContext.resolve=webpackEmptyAsyncContext,webpackEmptyAsyncContext.id="./src lazy recursive ^\\.\\/.*$ include: (?%21.*node_modules)(?:\\/src(?:\\/(?%21\\.)(?:(?:(?%21(?:^%7C\\/)\\.).)*?)\\/%7C\\/%7C$)(?%21\\.)(?=.)[^/]*?\\.mdx)$",module.exports=webpackEmptyAsyncContext},"./src lazy recursive ^\\.\\/.*$ include: (?%21.*node_modules)(?:\\/src(?:\\/(?%21\\.)(?:(?:(?%21(?:^%7C\\/)\\.).)*?)\\/%7C\\/%7C$)(?%21\\.)(?=.)[^/]*?\\.stories\\.(js%7Cjsx%7Cts%7Ctsx))$":(module,__unused_webpack_exports,__webpack_require__)=>{var map={"./app/components/pure-inbox-screen.stories":["./src/app/components/pure-inbox-screen.stories.ts",224,612],"./app/components/pure-inbox-screen.stories.ts":["./src/app/components/pure-inbox-screen.stories.ts",224,612],"./app/components/task-list.stories":["./src/app/components/task-list.stories.ts",978],"./app/components/task-list.stories.ts":["./src/app/components/task-list.stories.ts",978],"./app/components/task.stories":["./src/app/components/task.stories.ts",285],"./app/components/task.stories.ts":["./src/app/components/task.stories.ts",285]};function webpackAsyncContext(req){if(!__webpack_require__.o(map,req))return Promise.resolve().then((()=>{var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}));var ids=map[req],id=ids[0];return Promise.all(ids.slice(1).map(__webpack_require__.e)).then((()=>__webpack_require__(id)))}webpackAsyncContext.keys=()=>Object.keys(map),webpackAsyncContext.id="./src lazy recursive ^\\.\\/.*$ include: (?%21.*node_modules)(?:\\/src(?:\\/(?%21\\.)(?:(?:(?%21(?:^%7C\\/)\\.).)*?)\\/%7C\\/%7C$)(?%21\\.)(?=.)[^/]*?\\.stories\\.(js%7Cjsx%7Cts%7Ctsx))$",module.exports=webpackAsyncContext},"storybook/internal/channels":module=>{"use strict";module.exports=__STORYBOOK_MODULE_CHANNELS__},"storybook/internal/client-logger":module=>{"use strict";module.exports=__STORYBOOK_MODULE_CLIENT_LOGGER__},"storybook/internal/preview-errors":module=>{"use strict";module.exports=__STORYBOOK_MODULE_CORE_EVENTS_PREVIEW_ERRORS__},"storybook/internal/core-events":module=>{"use strict";module.exports=__STORYBOOK_MODULE_CORE_EVENTS__},"@storybook/global":module=>{"use strict";module.exports=__STORYBOOK_MODULE_GLOBAL__},"storybook/internal/preview-api":module=>{"use strict";module.exports=__STORYBOOK_MODULE_PREVIEW_API__}},__webpack_require__=>{var __webpack_exec__=moduleId=>__webpack_require__(__webpack_require__.s=moduleId);__webpack_require__.O(0,[418],(()=>(__webpack_exec__("./storybook-config-entry.js"),__webpack_exec__("./node_modules/zone.js/fesm2015/zone.js"),__webpack_exec__("./node_modules/@angular/compiler/fesm2022/compiler.mjs"),__webpack_exec__("./src/styles.css?ngGlobalStyle"))));__webpack_require__.O()}]);